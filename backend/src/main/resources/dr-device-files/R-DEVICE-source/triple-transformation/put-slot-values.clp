(defrule put-instance-slots-resources
;	(goal put-slot-values)
;	?x <- (triple (subject ?s) (predicate ?p&~[rdf:type]) (object ?o))
	;?x <- (triple 	(subject ?s&:(instance-existp ?s)) 
	;		(predicate ?p&~[rdf:type]&:(aux-resource2 ?s ?p)) 
	;		(object ?o&:(and (instance-namep ?o)(instance-existp ?o))))
	?x <- (triple 	(subject ?s&:(instance-existp ?s)) 
			(predicate ?p&~[rdf:type]&:(and	(slot-existp (class ?s) (instance-name-to-symbol ?p) inherit) (member$ INSTANCE-NAME (slot-types (class ?s) (instance-name-to-symbol ?p)))))
			(object ?o&:(and (instance-namep ?o)(instance-existp ?o))))
	;(test (test-counter))
	;(test (aux-resource2 ?s ?p))
;	(test (and 
;		(aux-resource2 ?s ?p)
;		(instance-namep ?o) 
;		(instance-existp ?o)
;	))
;	(test (instance-existp ?s))
;	(test (slot-existp (resource-class ?s) ?p inherit))
;	(test (member$ INSTANCE-NAME (slot-types (resource-class ?s) ?p)))
	;(not (triple (subject ?o) (predicate [rdf:type]))) ; I am not sure why this is needed!
  =>
  	;(bind ?s-inst (resource-instance ?s))
  	;(bind ?o-inst (resource-instance ?o))
  	(bind ?s-class (class ?s))
  	(bind ?o-class (class ?o))
  	(bind ?p (instance-name-to-symbol ?p))
	(bind ?p-type (get-type-of ?s-class ?p))
	;(bind ?p-type (get-type-of (class ?s) ?p))
	(if (compatible-types ?o-class ?p-type)
	;(if (compatible-types (class ?o) ?p-type)
	   then
	   	(retract ?x)
		(bind ?*triple_counter* (- ?*triple_counter* 1))
	   	; This situation never happened! May needed when multiple
	   	; files that talk about similar data. Check original ODP test-files
	   	(if (not (member$ ?o (funcall send ?s (sym-cat get- ?p))))
	   	   then
		   	;(printout t "Here!!!!!" crlf)
;  			(debug  "object: " ?s " predicate: " ?p " value: " ?o crlf)
	   		(slot-insert$ ?s ?p 1  ?o)
	   		;(slot-insert$ ?s ?p 9999  ?o)
	   	;   else
	   	;   	(printout t "Occurred! " ?s " " ?p " " ?o crlf)
	   	)
  		;(triple-retract ?x)
	   else
	      	; This should instead insert a triple that asserts a new type for the object!
;	      	(debug "Asserting new type " ?p-type " for object " ?o crlf)
		 (assert (triple (subject ?o) (predicate [rdf:type]) (object (symbol-to-instance-name ?p-type))))
		 (bind ?*triple_counter* (+ ?*triple_counter* 1))
	      	;(debug  "Type conflict!" crlf)
	      	;(debug  "Object: " ?o " is of type " (resource-class ?o) " while slot " ?p " of class " (resource-class ?s) " is of type " (get-type-of (resource-class ?s) ?p) crlf)
	   	;(assert (rejected-triple (subject ?s) (predicate ?p) (object ?o)))
	)
)

(defrule put-instance-slots-literals
;	(goal put-slot-values)
;	?x <- (triple (subject ?s) (predicate ?p) (object ?o&:(not (instance-namep ?o))) (object-datatype ?obj-dt))
	;?x <- (triple 	(subject ?s&:(instance-existp ?s)) 
	;		(predicate ?p&~[rdf:type]&:(aux-resource3 ?s ?p)) 
	;		(object ?o&:(not (instance-namep ?o))) 
	;		(object-datatype ?obj-dt))
	?x <- (triple 	(subject ?s&:(instance-existp ?s)) 
			(predicate ?p&~[rdf:type]&:(and (slot-existp (class ?s) (instance-name-to-symbol ?p) inherit) (neq (create$ INSTANCE-NAME) (slot-types (class ?s) (instance-name-to-symbol ?p)))))
			(object ?o&:(not (instance-namep ?o))) 
			(object-datatype ?obj-dt))
	;(test (test-counter))
	;(test (aux-resource3 ?s ?p))
;	(test (and
;		(aux-resource3 ?s ?p)
;		(not (instance-namep ?o))
;	))
;	(test (instance-existp ?s))
;	(test (slot-existp (resource-class ?s) ?p inherit))
;	(test (neq (create$ INSTANCE-NAME) (slot-types (resource-class ?s) ?p)))
	;(test (eq rdfs:Literal (nth$ 1 (send (symbol-to-instance-name ?p) get-rdfs:range))))
;	(test (aux-resource4 ?o))
;	(test (not (instance-existp ?o)))
;	(test (not (is-uri ?o)))
;	(test (not (is-parsed-uri ?o)))
  =>
  	(retract ?x)
  	(bind ?p (instance-name-to-symbol ?p))
  	(bind $?datatypes (slot-types (class  ?s) ?p))
  	(bind ?new-o (transform-datatype ?o ?obj-dt $?datatypes))
  	;(bind ?new-o (transform-datatype ?o ?obj-dt (slot-types (class  ?s) ?p)))
  	(if (neq ?new-o FALSE)
  	;(if (neq (transform-datatype ?o ?obj-dt (slot-types (class  ?s) ?p)) FALSE)
  	   then
;	  	(debug  "object: " ?s " predicate: " ?p " value: " ?o crlf)
 	   	(if (not (member$ ?o (funcall send ?s (sym-cat get- ?p))))
	   	   then
	 		(slot-insert$ ?s ?p 1 ?o)
	 	)
  		;(slot-insert$ ?s ?p 9999 ?o)
;  	   else
;  	   	(debug "Value " ?o " cannot be assigned to predicate " ?p " of object " ?s crlf)
  	)
	(bind ?*triple_counter* (- ?*triple_counter* 1))
)
