;(deffunction hash-member (?hash-bucket ?address)
;	(bind ?UsefulInfo-address-var (sym-cat "?*UsefulInfo-address" ?hash-bucket *))
;	(return (eval (str-cat$ (create$ "(" member$ ?address ?UsefulInfo-address-var ")" ))))
;)
(deffunction hash-member (?UsefulInfo-address-var ?address)
	;(printout t "?address: " ?address "  length: " (length$ (create$ ?address)) crlf)
	;(printout t "?address: " ?address "  length: " (str-length (sym-cat ?address)) crlf)
	;(printout t "Is meber? " (member$ (sym-cat ?address) (create$ 1 2 3)) crlf)
	;(bind ?UsefulInfo-address-var (sym-cat "?*UsefulInfo-address" ?hash-bucket *))
	;(printout t "address: " ?address "  -  list: " (eval ?UsefulInfo-address-var) crlf)
	;(bind ?result (eval (str-cat$ (create$ "(" member$ (sym-cat ?address) ?UsefulInfo-address-var ")" ))))
	;(printout t "   result: " ?result crlf)
	;(bind ?str (str-cat$ (create$ "(" member$ (sym-cat ?address) ?UsefulInfo-address-var ")" )))
	;(bind ?element (str-cat "(str-cat \"" ?address "\")"))
	(bind ?element (sym-cat ?address))
	(bind ?str (str-cat$ (create$ "(" member$ ?element ?UsefulInfo-address-var ")" )))
	;(printout t "hash-member: ?str: " ?str crlf)
	(return (eval ?str))
)

;(deffunction hash-nth (?hash-bucket ?pos)
;	(bind ?UsefulInfo-value-var (sym-cat "?*UsefulInfo-value" ?hash-bucket *))
;	(return (eval (str-cat$ (create$ "(" nth$ ?pos ?UsefulInfo-value-var ")" ))))
;)
(deffunction hash-nth (?UsefulInfo-value-var ?pos)
	;(bind ?UsefulInfo-value-var (sym-cat "?*UsefulInfo-value" ?hash-bucket *))
	(return (eval (str-cat$ (create$ "(" nth$ ?pos ?UsefulInfo-value-var ")" ))))
)


;(deffunction hash-add (?hash-bucket ?address ?value)
;	(bind ?UsefulInfo-address-var (sym-cat "?*UsefulInfo-address" ?hash-bucket *))
;	(bind ?UsefulInfo-value-var (sym-cat "?*UsefulInfo-value" ?hash-bucket *))
;	(eval (str-cat$ (create$ "(" bind ?UsefulInfo-address-var "(" create$ ?address ?UsefulInfo-address-var ")" ")" )))
;	(eval (str-cat$ (create$ "(" bind ?UsefulInfo-value-var "(" create$ ?value ?UsefulInfo-value-var ")" ")" )))
;)
(deffunction hash-add (?UsefulInfo-address-var ?UsefulInfo-value-var ?address ?value)
	;(bind ?UsefulInfo-address-var (sym-cat "?*UsefulInfo-address" ?hash-bucket *))
	;(bind ?UsefulInfo-value-var (sym-cat "?*UsefulInfo-value" ?hash-bucket *))
	;(eval (str-cat$ (create$ "(" bind ?UsefulInfo-address-var "(" create$ (sym-cat ?address) ?UsefulInfo-address-var ")" ")" )))
	;(bind ?element (str-cat "(str-cat \"" ?address "\")"))
	(bind ?element (sym-cat ?address))
	(eval (str-cat$ (create$ "(" bind ?UsefulInfo-address-var "(" create$ ?element ?UsefulInfo-address-var ")" ")" )))
	(eval (str-cat$ (create$ "(" bind ?UsefulInfo-value-var "(" create$ ?value ?UsefulInfo-value-var ")" ")" )))
)

;(deffunction hash-replace (?hash-bucket ?pos ?value)
;	(bind ?UsefulInfo-value-var (sym-cat "?*UsefulInfo-value" ?hash-bucket *))
;	(eval (str-cat$ (create$ "(" bind ?UsefulInfo-value-var "(" replace$ ?UsefulInfo-value-var ?pos ?pos ?value ")" ")" )))
;)
(deffunction hash-replace (?UsefulInfo-value-var ?pos ?value)
	;(bind ?UsefulInfo-value-var (sym-cat "?*UsefulInfo-value" ?hash-bucket *))
	(eval (str-cat$ (create$ "(" bind ?UsefulInfo-value-var "(" replace$ ?UsefulInfo-value-var ?pos ?pos ?value ")" ")" )))
)

;(deffunction hash-delete (?hash-bucket ?pos)
;	(bind ?UsefulInfo-address-var (sym-cat "?*UsefulInfo-address" ?hash-bucket *))
;	(bind ?UsefulInfo-value-var (sym-cat "?*UsefulInfo-value" ?hash-bucket *))
;	(eval (str-cat$ (create$ "(" bind ?UsefulInfo-value-var "(" delete$ ?UsefulInfo-value-var ?pos ?pos ")" ")" )))
;	(eval (str-cat$ (create$ "(" bind ?UsefulInfo-address-var "(" delete$ ?UsefulInfo-address-var ?pos ?pos ")" ")" )))
;)
(deffunction hash-delete (?UsefulInfo-address-var ?UsefulInfo-value-var ?pos)
	;(bind ?UsefulInfo-address-var (sym-cat "?*UsefulInfo-address" ?hash-bucket *))
	;(bind ?UsefulInfo-value-var (sym-cat "?*UsefulInfo-value" ?hash-bucket *))
	(eval (str-cat$ (create$ "(" bind ?UsefulInfo-value-var "(" delete$ ?UsefulInfo-value-var ?pos ?pos ")" ")" )))
	(eval (str-cat$ (create$ "(" bind ?UsefulInfo-address-var "(" delete$ ?UsefulInfo-address-var ?pos ?pos ")" ")" )))
)

(deffunction dot-or-slash-place (?string)
	(bind ?pos (str-index . ?string))
	(if (neq ?pos FALSE)
	   then
	   	(return ?pos)
	   else
	   	(bind ?pos (str-index / ?string))
	   	(if (neq ?pos FALSE)
	   	   then
	   	   	(return ?pos)
	   	   else
	   	   	(return FALSE)
	   	)
	)
)

(deffunction delimiter-places (?string)
	(bind ?init-length (str-length ?string))
	(bind $?result (create$ ?init-length))
	(bind ?pos (dot-or-slash-place ?string))
	(while (neq ?pos FALSE)
	   do
	   	(bind $?result (create$ ?pos $?result))
	   	(bind ?string (sub-string (+ ?pos 1) (str-length ?string) ?string))
	   	(bind ?pos (dot-or-slash-place ?string))
	)
	(bind ?a (funcall + (expand$ $?result)))
	(bind ?b (funcall * (expand$ $?result)))
	(return (abs (+ ?b ?a)))
)

;(deffunction address-to-integer (?string)
;	(bind ?init-length (str-length ?string))
;	(bind ?half-length (div ?init-length 2))
;	(bind ?first-string (sub-string 13 (- ?half-length 1) ?string))
;	(bind ?second-string (sub-string ?half-length (- ?init-length 1) ?string))
;	(bind ?sign (str-compare ?first-string ?second-string))
;	(bind ?result (+ ?init-length (* ?sign ?half-length)))
;	;(bind ?result (abs (+ ?init-length (* ?sign 50))))
;	(return ?result)
;)
(deffunction address-to-integer (?string)
	(bind ?init-length (str-length ?string))
;	(bind ?add1 (str-index "e" ?string))
;	(if (eq ?add1 FALSE) 
;	   then
	;   	(bind ?add1 (str-index "s" ?string))
	;   	(if (eq ?add1 FALSE)
	;   	   then
	   	   	;(bind ?add1 (str-index "u" ?string))
	   	   	;(if (eq ?add1 FALSE)
	   	   	;   then
	   	   	;   	(bind ?add1 (str-index "c" ?string))
	   	   	;   	(if (eq ?add1 FALSE)
	   	   	;   	   then
;	   				(bind ?add1 0)
	   		;	)
	   		;)
	;   	)
;	)
	;(bind ?add2 (str-index ".org" ?string))
	;(if (eq ?add2 FALSE) then (bind ?add2 0))
	;(bind ?add3 (str-index ".net" ?string))
	;(if (eq ?add3 FALSE) then (bind ?add3 0))
;	(bind ?result (integer (+ (* (** 3 ?*divident-buckets*) ?init-length) (* (** 8 ?*divident-buckets*) ?add1))))
	(bind ?result ?init-length)
;	(bind ?result (+ ?init-length ?add1 ?add2 ?add3))
	(return ?result)
)


(deffunction find-hash-bucket (?res)
	;(return (mod (strval ?res) ?*HashBuckets*))
	;(return (mod (str-length ?res) ?*HashBuckets*))
	;(if (eq (sub-string 1 3 ?res) "gen")
	;   then
	;   	(return (mod (string-to-field (sub-string 4 (str-length ?res) ?res)) ?*HashBuckets*))
	;   else
;	   	(return (mod (str-length ?res) ?*HashBuckets*))
	   	(return (mod (address-to-integer ?res) ?*HashBuckets*))
	;)
)

(deffunction init-hash-buckets (?hash-buckets)
	;(bind ?*HashBuckets* ?hash-buckets)
	(bind $?defglobalparts (create$))
	;(bind ?*UsefulInfo-address-vars* (create$))
	;(bind ?*UsefulInfo-value-vars* (create$))
	;(bind ?*future_resource_instances-vars* (create$))
	;(bind ?*future_resource_addresses-vars* (create$))
	;(bind ?*temp-future_resource_instances-vars* (create$))
	;(bind ?*temp-future_resource_addresses-vars* (create$))
	(loop-for-count  (?n 0 (- ?*HashBuckets* 1))
	   do
		(bind ?UsefulInfo-address-var (sym-cat "?*UsefulInfo-address" ?n *))
		(bind ?UsefulInfo-value-var (sym-cat "?*UsefulInfo-value" ?n *))
		; Treatment of empty nodes
		(bind ?future_resource_instances-var (sym-cat "?*future_resource_instances" ?n *))
		(bind ?future_resource_addresses-var (sym-cat "?*future_resource_addresses" ?n *))
		;(bind ?temp-future_resource_addresses-var (sym-cat "?*temp-future_resource_addresses" ?n *))
		;(bind ?temp-future_resource_instances-var (sym-cat "?*temp-future_resource_instances" ?n *))
	   	(bind $?defglobalparts (create$ $?defglobalparts 
	   		?UsefulInfo-address-var = "(" create$ ")" 
	   		?UsefulInfo-value-var = "(" create$ ")" 
	   		; Treatment of empty nodes
	   		?future_resource_instances-var = "(" create$ ")" 
	   		?future_resource_addresses-var = "(" create$ ")" 
	   		;?temp-future_resource_addresses-var = "(" create$ ")" 
	   		;?temp-future_resource_instances-var = "(" create$ ")" 
	   	))
		;(bind ?*UsefulInfo-address-vars* (create$ ?*UsefulInfo-address-vars* ?UsefulInfo-address-var))
		;(bind ?*UsefulInfo-value-vars* (create$ ?*UsefulInfo-value-vars* ?UsefulInfo-value-var))
		;(bind ?*future_resource_instances-vars* (create$ ?*future_resource_instances-vars* ?future_resource_instances-var))
		;(bind ?*future_resource_addresses-vars* (create$ ?*future_resource_addresses-vars* ?future_resource_addresses-var))
		;(bind ?*temp-future_resource_instances-vars* (create$ ?*temp-future_resource_instances-vars* ?temp-future_resource_instances-var))
		;(bind ?*temp-future_resource_addresses-vars* (create$ ?*temp-future_resource_addresses-vars* ?temp-future_resource_addresses-var))
	)
	(build (str-cat$ (create$ "(" defglobal $?defglobalparts ")" )))
)

(deffunction nullify-hash-buckets ()
	(loop-for-count  (?n 0 (- ?*HashBuckets* 1))
	   do
		(bind ?UsefulInfo-address-var (sym-cat "?*UsefulInfo-address" ?n *))
		(bind ?UsefulInfo-value-var (sym-cat "?*UsefulInfo-value" ?n *))
		(bind ?command1 (str-cat$ (create$ "(" bind ?UsefulInfo-address-var "(" create$ ")" ")" )))
		(bind ?command2 (str-cat$ (create$ "(" bind ?UsefulInfo-value-var "(" create$ ")" ")" )))
		;(printout t ?command crlf)
		(eval ?command1)
		(eval ?command2)
	)
)

(deffunction nullify-future-resource-hash-buckets ()
	(loop-for-count  (?n 0 (- ?*HashBuckets* 1))
	   do
		(bind ?future_resource_instances-var (sym-cat "?*future_resource_instances" ?n *))
		(bind ?future_resource_addresses-var (sym-cat "?*future_resource_addresses" ?n *))
		(bind ?command1 (str-cat$ (create$ "(" bind ?future_resource_instances-var "(" create$ ")" ")" )))
		(bind ?command2 (str-cat$ (create$ "(" bind ?future_resource_addresses-var "(" create$ ")" ")" )))
		;(printout t ?command crlf)
		(eval ?command1)
		(eval ?command2)
	)
)

(deffunction display-hash-buckets ()
	(loop-for-count  (?n 0 (- ?*HashBuckets* 1))
	   do
		(bind ?UsefulInfo-address-var (sym-cat "?*UsefulInfo-address" ?n *))
		;(bind ?UsefulInfo-value-var (sym-cat "?*UsefulInfo-value" ?n *))
		;(bind ?future_resource_instances-var (sym-cat "?*future_resource_instances" ?n *))
		;(bind ?future_resource_addresses-var (sym-cat "?*future_resource_addresses" ?n *))
		(bind ?command1 (str-cat$ (create$ "(" printout t ?n "\": \"" "\"Useful info: \"" "(" length$ ?UsefulInfo-address-var ")"  crlf ")" )))
		;(bind ?command2 (str-cat$ (create$ "(" printout t  "\" - \"" ?UsefulInfo-address-var crlf ")" )))
		;(bind ?command2 (str-cat$ (create$ "(" printout t "\"   Future resource: \"" "(" length$ ?future_resource_instances-var ")" crlf  ")" )))
		;(printout t ?command crlf)
		(eval ?command1)
		;(eval ?command2)
	)
)
(deffunction search-all-buckets (?index-root ?bucket-root ?resource)
	(loop-for-count  (?n 0 (- ?*HashBuckets* 1))
	   do
		(bind ?UsefulInfo-address-var (sym-cat ?index-root ?n *))
		(bind ?UsefulInfo-value-var (sym-cat ?bucket-root ?n *))
		;(bind ?command (str-cat$ (create$ "(" member$ ?resource ?UsefulInfo-value-var ")" )))
		(bind ?command (str-cat$ (create$ "(" member$ (str-cat ?resource) ?UsefulInfo-value-var ")" )))
		(bind ?pos (eval ?command))
		(if (neq ?pos FALSE)
		   then
		   	(return (eval (str-cat$ (create$ "(" nth$ ?pos ?UsefulInfo-address-var ")" ))))
		)
	)
	(return FALSE)
)

(deffunction search_useful_info (?res $?types)
	(bind ?hash-bucket (find-hash-bucket ?res))
	;(bind ?hash-bucket 0)
	;(bind ?UsefulInfo-address-var (nth$ (+ ?hash-bucket 1) ?*UsefulInfo-address-vars*))
	;(bind ?UsefulInfo-value-var (nth$ (+ ?hash-bucket 1) ?*UsefulInfo-value-vars*))
	(bind ?UsefulInfo-address-var (sym-cat "?*UsefulInfo-address" ?hash-bucket *))
	(bind ?UsefulInfo-value-var (sym-cat "?*UsefulInfo-value" ?hash-bucket *))
	;(bind ?pos (hash-member ?hash-bucket ?res))
	(bind ?pos (hash-member ?UsefulInfo-address-var ?res))
	;(bind ?pos (member$ ?res ?*UsefulInfo-address*))
	(if (neq ?pos FALSE)
	   then
	      	;(bind ?value (hash-nth ?hash-bucket ?pos))
	      	(bind ?value (hash-nth ?UsefulInfo-value-var ?pos))
	   	(while (> (length$ $?types) 0)
	   	   do
			(if (= (mod ?value (nth$ 1 $?types)) 0)
			   then
			   	(return TRUE)
			)
			(bind $?types (rest$ $?types))
		)
	)
	(return FALSE)
)

(deffunction delete_useful_info (?res $?types)
	(bind ?hash-bucket (find-hash-bucket ?res))
	;(bind ?hash-bucket 0)
	;(bind ?UsefulInfo-address-var (nth$ (+ ?hash-bucket 1) ?*UsefulInfo-address-vars*))
	;(bind ?UsefulInfo-value-var (nth$ (+ ?hash-bucket 1) ?*UsefulInfo-value-vars*))
	(bind ?UsefulInfo-address-var (sym-cat "?*UsefulInfo-address" ?hash-bucket *))
	(bind ?UsefulInfo-value-var (sym-cat "?*UsefulInfo-value" ?hash-bucket *))
	(bind ?pos (hash-member ?UsefulInfo-address-var ?res))
	;(bind ?pos (hash-member ?hash-bucket ?res))
	;(bind ?pos (member$ ?res ?*UsefulInfo-address*))
	(if (neq ?pos FALSE)
	   then
	      	;(bind ?value (hash-nth ?hash-bucket ?pos))
	      	(bind ?value (hash-nth ?UsefulInfo-value-var ?pos))
		;(bind ?value (nth$ ?pos ?*UsefulInfo-value*))
	   	(while (> (length$ $?types) 0)
	   	   do
	   	   	(bind ?one-type (nth$ 1 $?types))
			(if (= (mod ?value ?one-type) 0)
			   then
			   	(bind ?value (div ?value ?one-type))
			)
			(bind $?types (rest$ $?types))
		)
		(if (> ?value 1)
		   then
			;(bind ?*UsefulInfo-value* (replace$ ?*UsefulInfo-value* ?pos ?pos ?value))
			;(hash-replace ?hash-bucket ?pos ?value)
			(hash-replace ?UsefulInfo-value-var ?pos ?value)
		   else
		   	;(hash-delete ?hash-bucket ?pos)
		   	(hash-delete ?UsefulInfo-address-var ?UsefulInfo-value-var ?pos)
		   	;(bind ?*UsefulInfo-value* (delete$ ?*UsefulInfo-value* ?pos ?pos))
		   	;(bind ?*UsefulInfo-address* (delete$ ?*UsefulInfo-address* ?pos ?pos))
		)
	)
)

; CUI
(deffunction collect-useful-info (?subject ?predicate ?object)
	;(printout t "Subject: " ?subject "  -  Predicate: " ?predicate "  -  Object: " ?object crlf)
	;(bind ?result FALSE)
	(bind ?hash-bucket (find-hash-bucket ?subject))
	;(bind ?hash-bucket 0)
	;(bind ?UsefulInfo-address-var (nth$ (+ ?hash-bucket 1) ?*UsefulInfo-address-vars*))
	;(bind ?UsefulInfo-value-var (nth$ (+ ?hash-bucket 1) ?*UsefulInfo-value-vars*))
	(bind ?UsefulInfo-address-var (sym-cat "?*UsefulInfo-address" ?hash-bucket *))
	(bind ?UsefulInfo-value-var (sym-cat "?*UsefulInfo-value" ?hash-bucket *))
   	(if (eq ?predicate [rdf:type])
	   then
	   	;(bind ?*HasType* (create$ ?subject ?*HasType*))
		;(bind ?pos (member$ ?subject ?*UsefulInfo-address*))
		;(bind ?pos (hash-member ?hash-bucket ?subject))			
		(bind ?pos (hash-member ?UsefulInfo-address-var ?subject))			
		(if (neq ?pos FALSE)
		   then
	   		;(bind ?value (nth$ ?pos ?*UsefulInfo-value*))
	   		;(bind ?value (hash-nth ?hash-bucket ?pos))
	   		(bind ?value (hash-nth ?UsefulInfo-value-var ?pos))
	   		(if (<> (mod ?value 2) 0)
	   		   then
				;(bind ?*UsefulInfo-value* (replace$ ?*UsefulInfo-value* ?pos ?pos (* 2 ?value)))
				;(hash-replace ?hash-bucket ?pos (* 2 ?value))
				(hash-replace ?UsefulInfo-value-var ?pos (* 2 ?value))
			)
		   else
			;(bind ?*UsefulInfo-address* (create$ ?subject ?*UsefulInfo-address*))
			;(bind ?*UsefulInfo-value* (create$ 2 ?*UsefulInfo-value*))
			;(hash-add ?hash-bucket ?subject 2)
			(hash-add ?UsefulInfo-address-var ?UsefulInfo-value-var  ?subject 2)
			(bind ?pos 1)
		)
	   	(if (eq ?object [rdfs:ContainerMembershipProperty])
		   then
		   	;(bind ?value (nth$ ?pos ?*UsefulInfo-value*))
		   	;(bind ?value (hash-nth ?hash-bucket ?pos))
		   	(bind ?value (hash-nth ?UsefulInfo-value-var ?pos))
		   	(if (<> (mod ?value 7) 0)
		   	   then
				;(bind ?*UsefulInfo-value* (replace$ ?*UsefulInfo-value* ?pos ?pos (* 7 ?value)))
				;(hash-replace ?hash-bucket ?pos (* 7 ?value))
				(hash-replace ?UsefulInfo-value-var ?pos (* 7 ?value))
			)
		   else
			(if (eq ?object [rdf:Property])
			   then
			   	;(bind ?value (nth$ ?pos ?*UsefulInfo-value*))
			   	;(bind ?value (hash-nth ?hash-bucket ?pos))
			   	(bind ?value (hash-nth ?UsefulInfo-value-var ?pos))
			   	(if (<> (mod ?value 5) 0)
			   	   then
					;(bind ?*UsefulInfo-value* (replace$ ?*UsefulInfo-value* ?pos ?pos (* 5 ?value)))
					;(hash-replace ?hash-bucket ?pos (* 5 ?value))
					(hash-replace ?UsefulInfo-value-var ?pos (* 5 ?value))
				)
			)
		)
	   else
	   	(if (eq ?predicate [rdfs:range])
   	 	  then
	   	   	;(bind ?*HasRange* (create$ ?subject ?*HasRange*))
			;(bind ?pos (member$ ?subject ?*UsefulInfo-address*))
			;(bind ?pos (hash-member ?hash-bucket ?subject))
			(bind ?pos (hash-member ?UsefulInfo-address-var ?subject))
			(if (neq ?pos FALSE)
			   then
			   	;(bind ?value (nth$ ?pos ?*UsefulInfo-value*))
			   	;(bind ?value (hash-nth ?hash-bucket ?pos))
			   	(bind ?value (hash-nth ?UsefulInfo-value-var ?pos))
			   	(if (<> (mod ?value 3) 0)
			   	   then
					;(bind ?*UsefulInfo-value* (replace$ ?*UsefulInfo-value* ?pos ?pos (* 3 ?value)))
					;(hash-replace ?hash-bucket ?pos (* 3 ?value))
					(hash-replace ?UsefulInfo-value-var ?pos (* 3 ?value))
				)
			   else
				;(bind ?*UsefulInfo-address* (create$ ?subject ?*UsefulInfo-address*))
				;(bind ?*UsefulInfo-value* (create$ 3 ?*UsefulInfo-value*))
				;(hash-add ?hash-bucket ?subject 3)
				(hash-add ?UsefulInfo-address-var ?UsefulInfo-value-var  ?subject 3)
			)
		)
	)
	;(return ?result)
)
